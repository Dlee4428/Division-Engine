#version 450 core

// WHAT TCS DOES
// Level of detail (determining the tessellation level) and view frustum culling are performed in the tessellation control shader. 
// Level of detail is calculated based on the projected screen size of a sphere fitted to each patch edge.
// Frustum Culling is performed by testing the bounding sphere of the patch against the view frustum planes.

// THIS DETERMINES THE NUMBER OF LOOP SHADER RUN PER PATCH
layout (vertices = 4) out;

in TerrainVertOut {
	vec2 texCoordNorm;
	vec2 texCoordAlbedo;
} tcs_in[];

out TerrainTCSOut {
	vec2 texCoordNorm;
	vec2 texCoordAlbedo;
} tcs_out[];

layout(location = 11) uniform mat4 viewMat;
layout(location = 13) uniform mat4 projMat;
layout(location = 14) uniform vec4 frustum[6];

layout(location = 30) uniform ivec2 viewportSize;
layout(location = 32) uniform float scaleDisplacement;
layout(location = 33) uniform float tessTriWidth;

layout(binding = 0) uniform sampler2D disTexture;

// AABB FRUSTUM CULLING METHOD
struct AABB {
	vec3 min, max;
};

// COMPUTE AABB PLANE INTERSECTION
bool AABBPlaneIntersection(AABB aabb, vec4 plane) {
	// Convert AABB to center-extents representation
	vec3 halfDiag = (aabb.max - aabb.min) * 0.5; // Compute half diagonal
	vec3 center = aabb.min + halfDiag; // Compute AABB center

	float e = halfDiag.x + abs(plane.x) +
			  halfDiag.y + abs(plane.y) +
			  halfDiag.z + abs(plane.z);  // Compute positive extents
	
	// Compute distance of box center from plane
	float s = dot(center, plane.xyz) + plane.w;

	// Intersection occurs when distance s falls within [-e, +e] if else statement
	if (s - e > 0.0) {
		return false; // Outside bound return false;
	}
	else if (s + e < 0.0) {
		return true;  // Inside bound return true;
	}
	else {
		return true;  // Even else, it's still intersecting within.
	}
}

// COMPUTE AABB FRUSTUM INTERSECTION USING PREVIOUS AABB PLANE METHOD
bool AABBFrustumIntersection(AABB aabb) {
	bool isIntersecting = false;
	bool result = false;

	for (int i = 0; i < 6; ++i) {
		result = AABBPlaneIntersection(aabb, frustum[i]);	
		if (!result) {
			return false;
		}
		else {
			isIntersecting = true;
		}
	}
	return isIntersecting;
}

void OnCreateAABBPatch(vec3 patch1_, vec3 patch2_, vec3 patch3_, vec3 patch4_, out AABB aabb){
	// LINKING TO AABB MIN AND MAX USING INPUT VERTICES
	aabb.min.x = patch4_.x;
	aabb.min.y = min(0.0, scaleDisplacement);
	aabb.min.z = patch4_.z;

	aabb.max.x = patch2_.x;
	aabb.max.y = max(0.0, scaleDisplacement);
	aabb.max.z = patch2_.z;
}


// COMPUTE LEVEL OF DETAIL (LOD)
// PURPOSE - TO PROJECT SPHERE INTO THE CLIP SPACE AND RETURN THE AMOUNT OF TRIANGLES
// THAT ARE REQUIRED TO FIT ACROSS THE SCREENSPACE DIAMETER.

float ScreenSpaceTess(vec3 controlP0_, vec3 controlP1_, float diameter_) {
	vec3 center = (controlP0_ + controlP1_) * 0.5;
	vec4 p0 = viewMat * vec4(center, 1.0);
	vec4 p1 = viewMat * vec4(center, 1.0);
	p1.x += diameter_;

	vec4 clipSpace0 = projMat * p0;
	vec4 clipSpace1 = projMat * p1;

	clipSpace0 /= clipSpace0.w;
	clipSpace1 /= clipSpace1.w;

	clipSpace0.xy = ((clipSpace0.xy * 0.5) + 0.5) * viewportSize;
	clipSpace1.xy = ((clipSpace1.xy * 0.5) + 0.5) * viewportSize;

	// distance func is from openGL shader
	return distance(clipSpace0, clipSpace1) / tessTriWidth;
}

void main() {
	
	AABB aabb;

	// gl_InvocationID — contains the invocation index of the current shader
	// contains the index of the output patch vertex assigned to the shader invocation. 
	// It is assigned an integer value in the range [0, N-1] where N is the number of output patch vertices.
	// Source - https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/gl_InvocationID.xhtml
	if (gl_InvocationID == 0) {	
		// gl_in[].gl_Position.xyz -> Grabbing vert shader gl_positions for the AABB patch
		OnCreateAABBPatch(gl_in[0].gl_Position.xyz, gl_in[1].gl_Position.xyz, 
						  gl_in[2].gl_Position.xyz, gl_in[3].gl_Position.xyz, aabb);

		// IF AABB FRUSTUM INTERSECTION OCCURS PROCEED 
		if (AABBFrustumIntersection(aabb)) {
			// Address control points positions to tess control shader in order to passing y in the pipeline
			vec4 controlP0 = gl_in[0].gl_Position;
			vec4 controlP1 = gl_in[1].gl_Position;
			vec4 controlP2 = gl_in[2].gl_Position;
			vec4 controlP3 = gl_in[3].gl_Position;

			// Displace control points on y position for the height on LOD
			controlP0.y += texture(disTexture, tcs_in[0].texCoordNorm).r * scaleDisplacement;
			controlP1.y += texture(disTexture, tcs_in[1].texCoordNorm).r * scaleDisplacement;
			controlP2.y += texture(disTexture, tcs_in[2].texCoordNorm).r * scaleDisplacement;
			controlP3.y += texture(disTexture, tcs_in[3].texCoordNorm).r * scaleDisplacement;

			const float sideLength = controlP1.x - controlP0.x; // Determining side length of tiles to the end

			// gl_TessLevelOuter — contains the outer tessellation levels for the current patch
			// Used to assign values to the corresponding outer tesellation levels of the current patch. 
			// The values written into gl_TessLevelOuter by the tessellation control shader are used by the tessellation primitive generator 
			// to control primitive tessellation and may be read by the subsequent tessellation evaluation shader.
			// Source - https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/gl_TessLevelOuter.xhtml
			gl_TessLevelOuter[0] = ScreenSpaceTess(controlP3.xyz, controlP0.xyz, sideLength);
			gl_TessLevelOuter[1] = ScreenSpaceTess(controlP0.xyz, controlP1.xyz, sideLength);
			gl_TessLevelOuter[2] = ScreenSpaceTess(controlP1.xyz, controlP2.xyz, sideLength);
			gl_TessLevelOuter[3] = ScreenSpaceTess(controlP2.xyz, controlP3.xyz, sideLength);

			// gl_TessLevelInner — contains the inner tessellation levels for the current patch
			// Used to assign values to the corresponding inner tesellation levels of the current patch. 
			// The values written into gl_TessLevelInner by the tessellation control shader are used by the tessellation primitive generator 
			// to control primitive tessellation and may be read by the subsequent tessellation evaluation shader.
			// Source - https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/gl_TessLevelInner.xhtml
			gl_TessLevelInner[0] = (gl_TessLevelOuter[1] + gl_TessLevelOuter[3]) * 0.5;
			gl_TessLevelInner[1] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[2]) * 0.5;
		} // IF AABB FRUSTUM INTERSECTION DOES NOT OCCURS THEN IT IS -1.0
		else {
			gl_TessLevelOuter[0] = -1.0;
			gl_TessLevelOuter[1] = -1.0;
			gl_TessLevelOuter[2] = -1.0;
			gl_TessLevelOuter[3] = -1.0;

			gl_TessLevelInner[0] = -1.0;
			gl_TessLevelInner[1] = -1.0;
		}
	}
	// SEND TCS OUT USING gl_InvocationID references
	tcs_out[gl_InvocationID].texCoordNorm = tcs_in[gl_InvocationID].texCoordNorm;
	tcs_out[gl_InvocationID].texCoordAlbedo = tcs_in[gl_InvocationID].texCoordAlbedo;

	// SEND GL OUT USING gl_InvocationID references
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}